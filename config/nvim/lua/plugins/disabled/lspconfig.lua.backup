-- ----------------------------------------------
-- nvim-lspconfig: user contributed configs for the LSP (https://github.com/neovim/nvim-lspconfig)
-- :help lspconfig.txt
--
-- NOTE: Dependencies are set to ensure that plugins are installed in this order:
--         1. mason.nvim
--         2. mason-lspconfig.nvim
--         3. LSP Servers via `nvim-lspconfig`
-- ----------------------------------------------

-- Enable debugging, will dramatically decrease performance.
-- vim.lsp.set_log_level("debug")

local capabilities = vim.lsp.protocol.make_client_capabilities()
capabilities = require("cmp_nvim_lsp").default_capabilities(capabilities)

local keymap = require("user-keymap")
local misc = require("mini.misc")
local mason_ensure_installed = {
  "actionlint",
  "ansible-lint",
  "ansible-language-server",
  "bash-language-server",
  "codespell",
  "css-lsp",
  "djlint",
  "docker-compose-language-service",
  "dockerfile-language-server",
  "eslint_d",
  "gitlint",
  "gopls",
  "hadolint",
  "helm-ls",
  "html-lsp",
  "jq-lsp",
  "jsonlint",
  "json-lsp",
  "lemminx",
  "ltex-ls",
  "lua-ls",
  "markdownlint-cli2",
  "marksman",
  "mypy",
  "neocmakelsp",
  "nginx-language-server",
  "python-lsp-server",
  "revive",
  "rubocop",
  "ruby-lsp",
  "ruff",
  "shellcheck",
  "sqlls",
  "taplo",
  "terraform-ls",
  "tflint",
  "ts-ls",
  "vale",
  "vale-ls",
  "vim-language-server",
  "vint",
  "yamllint",
  "yaml-language-server",
}

-- Language server customizations
-- help: mason-lspconfig-automatic-server-setup
-- help: mason-lspconfig.setup_handlers()
local mason_lsp_server_configs = {
    yamlls = {
        filetypes = { "yaml" }, -- don't run on helm filetypes
    },
    lua_ls = { -- https://github.com/LuaLS/lua-language-server/wiki/Diagnostics
        Lua = {
            filetypes = "lua", -- filetypes the language server will attach to
            workspace = { checkThirdParty = false },
            telemetry = { enable = false },
            diagnostics = {
                globals = { "vim", }
            },
        },
    },
    vale_ls = {
        vale_ls = {
            cmd = { "vale-ls" },
            filetypes = { "markdown", "text", "tex", "rst" },
            root_dir = misc.find_root(0, MISC_PROJECT_MARKERS, function() MISC_FALLBACK() end),
            single_file_support = true,
            valeCLI = {
                installVale = true,
                syncOnStartup = true,
                configPath = vim.env.HOME .. "/.dotfiles/config/vale/.vale.ini",
            },
        },
    },
    ltex = {
        ltex = {
            root_dir = vim.env.HOME .. "/.local/share/nvim/mason/packages/ltex-ls",
            language = "en-US",
        },
    },
    pylsp = {
        pylsp = {
            plugins = {
                -- formatters
                autopep8 = { enabled = false },
                black = { enabled = true },
                pyls_isort = { enabled = true },
                yapf = { enabled = false },

                -- linters
                flake8 = { enabled = false },
                mccabe = { enabled = true },
                pycodestyle = { enabled = false },
                pydocstyle = { enabled = false },
                pyflakes = { enabled = false },
                pylint = { enabled = false },
                python_lsp_ruff = { enabled = true },

                -- type checkers
                pylsp_mypy = { enabled = true },

                -- auto-completion
                jedi_completion = {
                    enabled = true,
                    fuzzy = true,
                    include_params = true,
                    include_class_objects = true,
                    include_function_objects = true,
                },
                jedi_definition = {
                    enabled = true,
                    follow_imports = true,
                    follow_builtin_imports = true,
                    follow_builtin_deffinitions = true,
                },
                rope_autoimport = {
                    enabled = true,
                    completions = { enabled = true },
                    code_actions = { enabled = true },
                },
                rope_completion = { enabled = true },
            },
        },
    },
}

return {
    "neovim/nvim-lspconfig",
    lazy = false,
    dependencies = {
        -- Mason helper for LSP configs/plugins (https://github.com/williamboman/mason-lspconfig.nvim)
        -- :help mason-lspconfig.nvim
        {
            "williamboman/mason-lspconfig.nvim",
            lazy = false,
            config = function()
                -- Ensure Mason is set up before attempting to configure LSPs
                require("mason").setup()

                -- Configure mason-lspconfig handlers
                require("mason-lspconfig").setup({
                    automatic_installation = false,
                    handlers = {
                        -- Default handler for all servers
                        function(server_name)
                            require("lspconfig")[server_name].setup {
                                capabilities = capabilities,
                                on_attach = keymap.lsp_maps,
                                settings = mason_lsp_server_configs[server_name],
                                filetypes = (mason_lsp_server_configs[server_name] or {}).filetypes,
                            }
                        end,
                    }
                })
            end,
            dependencies = {
                -- Mason: LSP and related plugin manager (https://github.com/williamboman/mason.nvim)
                -- :help mason.nvim
                {
                    "williamboman/mason.nvim",
                    lazy = false,
                    config = true,
                    init = function()
                        local registry = require("mason-registry")
                        local installed_packages = registry.get_all_packages()

                        -- Extract just the names from installed packages
                        local installed_names = {}
                        for _, pkg in ipairs(installed_packages) do
                            table.insert(installed_names, pkg.name)
                        end

                        -- Find packages that need to be installed
                        local packages_to_install = {}
                        for _, required_pkg in ipairs(mason_ensure_installed) do
                            local is_installed = false
                            for _, installed_pkg in ipairs(installed_names) do
                                if installed_pkg == required_pkg then
                                    is_installed = true
                                    break
                                end
                            end

                            if not is_installed then
                                table.insert(packages_to_install, required_pkg)
                            end
                        end

                        -- Create command string for MasonInstall
                        if #packages_to_install > 0 then
                            local install_cmd = "MasonInstall " .. table.concat(packages_to_install, " ")

                            vim.cmd(install_cmd)
                        end
                    end
                },

                -- LazyDev: lua-ls configuration for nvim runtime and api (https://github.com/folke/lazydev.nvim)
                -- :help lazydev.nvim.txt
                {
                    "folke/lazydev.nvim",
                    ft = "lua", -- only load on lua files
                    opts = {
                        library = {
                            -- See the configuration section for more details
                            -- Load luvit types when the `vim.uv` word is found
                            { path = "luvit-meta/library", words = { "vim%.uv" } },
                        },
                    },
                },
                { "Bilal2453/luvit-meta", lazy = true }, -- optional `vim.uv` typings
                {                                        -- optional completion source for require statements and module annotations
                    "hrsh7th/nvim-cmp",
                    opts = function(_, opts)
                        opts.sources = opts.sources or {}
                        table.insert(opts.sources, {
                            name = "lazydev",
                            group_index = 0, -- set group index to 0 to skip loading LuaLS completions
                        })
                    end,
                },

                -- Fidget: LSP status updates (https://github.com/j-hui/fidget.nvim)
                -- :help fidget.txt
                { "j-hui/fidget.nvim",    tag = "legacy", lazy = true, config = true, event = "LspAttach" },
            },
        },
        {
            "mfussenegger/nvim-lint",
            lazy = false,
            dependencies = {
                {
                    -- Mason helper for nvim-lint integration
                    "rshkarin/mason-nvim-lint",
                    opts = {
                        automatic_installation = false,
                    },
                },
            },
            init = function()
                -- Initalize nvim-lint
                local linters_by_ft = require("lint").linters_by_ft
                local mypy = require("lint").linters.mypy

                table.insert(mypy.args, "--python-executable ${HOME}/.asdf/shims/python")

                -- Linters that run on specific paths/all filetypes are controlled
                -- with autocommands. See `user-autocommands.lua`.
                local linter_to_ft = {
                    ["ansible.yaml"] = { "ansible-lint" },
                    dockerfile       = { "hadolint" },
                    gitcommmit       = { "gitlint" },
                    go               = { "revive", "djlint" },
                    javascript       = { "eslint_d" },
                    jinja            = { "djlint" },
                    json             = { "jsonlint" },
                    markdown         = { "markdownlint-cli2", "vale" },
                    python           = { "ruff", "mypy" },
                    rst              = { "vale" },
                    ruby             = { "rubocop" },
                    sh               = { "shellcheck" },
                    terraform        = { "tflint" },
                    tex              = { "vale" },
                    text             = { "vale" },
                    typescript       = { "eslint_d" },
                    vim              = { "vint" },
                    yaml             = { "yamllint" },
                    zsh              = { "shellcheck" },
                }

                -- linters for all filetypes
                for ft, _ in pairs(linters_by_ft) do
                    table.insert(linters_by_ft[ft], "editorconfig-checker")
                    table.insert(linters_by_ft[ft], "codespell")
                end

                local lint = require("lint")

                for ft, linters in pairs(linter_to_ft) do
                    lint.linters_by_ft[ft] = linters
                end
            end,
        },
    },
}
