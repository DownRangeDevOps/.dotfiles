#!/usr/bin/env python3
"""Git hook to prepare commit messages with conventional commit styling and ticket linking.

This prepare-commit-msg hook automatically formats your commit messages based on branch
naming conventions and links them to your project tracking system. It extracts information
from your current branch name, including commit type, scope, and ticket ID, then formats
a proper conventional commit message.

Functionality:
    * Extracts commit type (feat, fix, etc.) and scope from branch name
    * Identifies ticket IDs (like ABC-123) from branch name
    * Formats subject line following conventional commit standards
    * Adds Markdown reference links to project tracker tickets
    * Automatically detects user initials if not specified
    * Gracefully handles variations in branch naming

Example branch names that will be parsed correctly:
    * feature/ABC-123--add-new-login
        → feat: Add new login [[ABC-123]]
    * fix-ui/JRA-456--button-alignment
        → fix(ui): Button alignment [[JRA-456]]
    * rf/docs/update-readme
        → docs: Update readme
    * refactor/auth--jwt-implementation
        → refactor: Jwt implementation
    * ABC-789--security-fix
        → Security fix [[ABC-789]]

Environment variables:
    * PROJECT_TRACKER_URL: Base URL for ticket links (e.g., "https://jira.company.com/browse")
    * USER_INITIALS: Your initials (auto-detected from git config if not set)
    * COMMIT_TYPES: Regex for valid commit types (defaults to conventional commit types)

Installation:
    1. Save this script as `.git/hooks/prepare-commit-msg` in your repository
    2. Make it executable: `chmod +x .git/hooks/prepare-commit-msg`
    3. Set up a commit template (see below)
    4. Configure environment variables for your tracker
"""

import os
import re
import sys
import logging
import subprocess
from pathlib import Path
from typing import Dict, List, Optional, Tuple


# Configure logging
logging.basicConfig(level=logging.WARNING, format='%(levelname)s: %(message)s')
logger = logging.getLogger("prepare-commit-msg")


def run_cmd(cmd: List[str]) -> str:
    """Execute a shell command and return its output.

    Args:
        cmd: A list of command arguments to execute

    Returns:
        The command's standard output as a string, or empty string on error
    """
    try:
        return subprocess.check_output(cmd, universal_newlines=True).strip()
    except subprocess.CalledProcessError:
        return ""
    except Exception as e:
        logger.error(f"Command execution error: {e}")
        return ""


def get_git_config(key: str) -> str:
    """Retrieve a value from git config.

    Args:
        key: The git config key to retrieve

    Returns:
        The config value, or empty string if not set
    """
    return run_cmd(["git", "config", "--get", key])


def get_current_branch() -> str:
    """Get the name of the current git branch.

    Returns:
        The current branch name, or empty string if detection fails
    """
    return run_cmd(["git", "branch", "--show-current"])


def get_commit_template_path() -> Optional[Path]:
    """Locate the git commit template file.

    Checks for commit.template in git config, then searches common locations.

    Returns:
        Path to the template file, or None if not found
    """
    try:
        template_path = get_git_config("commit.template")
        if template_path:
            if template_path.startswith("~"):
                template_path = os.path.expanduser(template_path)

            path = Path(template_path)
            if path.exists():
                return path

        # Search common locations
        home = Path.home()
        common_locations = [
            home / ".git" / "commit-template",
            home / ".config" / "git" / "commit-template",
            home / ".dotfiles" / "git" / "commit-template",
            Path(".git") / "commit-template"
        ]

        for loc in common_locations:
            if loc.exists():
                return loc

        return None
    except Exception as e:
        logger.error(f"Error finding commit template: {e}")
        return None


def detect_user_initials() -> str:
    """Attempt to extract user initials from git config.

    Tries multiple strategies:
    1. Extract from user.email (e.g., john.doe@company.com -> jd)
    2. Extract from user.name (e.g., John Doe -> jd)
    3. Use first two letters of email

    Returns:
        Detected initials or empty string if detection fails
    """
    user_initials = ""

    try:
        name = get_git_config("user.name")
        if name:
            # Use first letter of each word in name
            parts = [word[0].lower() for word in name.split() if word]
            return ''.join(parts[:2])  # Limit to first two initials

        email = get_git_config("user.email")
        if email:
            # Try to match pattern like "first.last@domain.com"
            match = re.match(r'^([a-z]).*\.([a-z])[^@]*@', email.lower())
            if match:
                return match.group(1) + match.group(2)

            # Fallback to first two chars of email
            return email[:2].lower()

        return ""
    except Exception as e:
        logger.error(f"Error detecting user initials: {e}")
        return ""


def parse_branch_name(branch: str, user_initials: str, commit_types_pattern: str) -> Dict[str, str]:
    """Extract meaningful components from a git branch name.

    Parses branch name to identify type, scope, ticket ID, and subject.
    Handles various formats of branch names with delimiters / and --.

    Args:
        branch: The branch name to parse
        user_initials: User initials to filter out from branch name
        commit_types_pattern: Regex pattern for commit types

    Returns:
        Dictionary with extracted type, scope, ticket_id, and subject
    """
    result = {
        "type": "",
        "scope": "",
        "ticket_id": "",
        "subject": ""
    }

    if not branch:
        return result

    try:
        # Split by "/" and "--" to get branch components
        parts = []
        for part in branch.split("/"):
            parts.extend(part.split("--"))

        # Clean up parts
        parts = [p.strip() for p in parts if p.strip()]
        if not parts:
            return result

        # Extract commit type and scope
        commit_types_regex = re.compile(commit_types_pattern, re.IGNORECASE)
        for i, part in enumerate(parts):
            match = commit_types_regex.match(part)
            if match:
                type_with_scope = part
                type_scope_parts = type_with_scope.split("-", 1)
                result["type"] = type_scope_parts[0]
                if len(type_scope_parts) > 1:
                    result["scope"] = type_scope_parts[1]
                parts.pop(i)
                break

        # Special case: Common feature branch format "feature/..."
        for i, part in enumerate(parts):
            if part.lower() == "feature":
                result["type"] = "feat"
                parts.pop(i)
                break

        # Extract ticket ID
        ticket_pattern = re.compile(r'[A-Za-z]+[0-9]*-[0-9]+')
        for i, part in enumerate(parts):
            match = ticket_pattern.search(part)
            if match:
                result["ticket_id"] = match.group(0)
                if part == result["ticket_id"]:
                    parts.pop(i)
                break

        # Remove user initials
        if user_initials:
            for i, part in enumerate(parts):
                if part.lower() == user_initials.lower():
                    parts.pop(i)
                    break

        # Format remaining parts as subject
        subject = " ".join(parts)
        subject = re.sub(r'-', ' ', subject)
        if subject:
            subject = subject[0].upper() + subject[1:]

        result["subject"] = subject
        return result
    except Exception as e:
        logger.error(f"Error parsing branch name: {e}")
        return result


def format_commit_subject(components: Dict[str, str]) -> str:
    """Format a conventional commit subject line.

    Creates a commit subject following conventional commit format:
    type(scope): Subject [[Ticket-ID]]

    Args:
        components: Dictionary with type, scope, ticket_id, and subject

    Returns:
        Formatted commit subject line
    """
    try:
        parts = []

        # Add type(scope):
        if components["type"]:
            if components["scope"]:
                parts.append(f"{components['type']}({components['scope']}):")
            else:
                parts.append(f"{components['type']}:")

        # Add subject
        if components["subject"]:
            parts.append(components["subject"])

        # Add ticket ID in double brackets
        if components["ticket_id"]:
            parts.append(f"[[{components['ticket_id']}]]")

        return " ".join(parts)
    except Exception as e:
        logger.error(f"Error formatting commit subject: {e}")
        return components.get("subject", "")


def expand_template_variables(template_content: str, variables: Dict[str, str]) -> str:
    """Replace placeholder variables in a template string.

    Args:
        template_content: Template string with ${VAR} placeholders
        variables: Dictionary of variable names and values

    Returns:
        Template with variables replaced
    """
    try:
        result = template_content
        for key, value in variables.items():
            placeholder = f"${{{key}}}"
            result = result.replace(placeholder, value)
        return result
    except Exception as e:
        logger.error(f"Error expanding template variables: {e}")
        return template_content


def create_default_template() -> str:
    """Create a default commit message template.

    Returns:
        A commit message template with placeholders
    """
    return """${SUBJECT}

${REFERENCE}
#
# Write clear, specific details about WHY this change is necessary
# and any non-obvious implementation choices.
#
# Guidelines:
# - Use imperative mood ("Add feature" not "Added feature")
# - Limit first line to 50 chars (type(scope): description [[ticket]])
# - Wrap text at 72 chars
# - Separate subject from body with blank line
# - Reference tickets and issues in the footer
#
# Structure:
# 1. What was changed? (already in subject)
# 2. Why was it changed? (root cause/reason)
# 3. How does it address the issue?
# 4. What side effects might this change have?
"""


def main():
    """Main entry point for the prepare-commit-msg hook."""
    # Validate arguments
    if len(sys.argv) < 2:
        logger.error("Missing commit message file argument")
        sys.exit(1)

    commit_msg_file = sys.argv[1]
    commit_source = sys.argv[2] if len(sys.argv) > 2 else ""

    # Only proceed if called from the template
    if commit_source != "template":
        sys.exit(0)

    # Get environment variables with defaults
    default_commit_types = "^feat|^fix|^build|^chore|^ci|^docs|^style|^refactor|^perf|^test"
    commit_types = os.environ.get("COMMIT_TYPES", default_commit_types)

    try:
        user_initials = get_git_config("hook.userInitials")
    except Exception as e:
        logger.error(f"Project tracker URL was not found in .gitconfig: {e}")
        user_initials = os.environ.get("USER_INITIALS", detect_user_initials())
        logger.info(f"Project tracker URL set to {user_initials}")
        pass

    try:
        project_tracker_url = get_git_config("hook.projectTrackerUrl")
    except Exception as e:
        logger.error(f"Project tracker URL was not found in .gitconfig: {e}")
        project_tracker_url = os.environ.get("PROJECT_TRACKER_URL", "")
        logger.info(f"Project tracker URL set to {project_tracker_url}")
        pass

    # Get current branch name
    branch = os.environ.get("CUR_BRANCH", get_current_branch())
    if not branch:
        logger.warning("Could not determine current branch name")
        sys.exit(0)

    # Parse branch name
    components = parse_branch_name(branch, user_initials, commit_types)

    # Warn about missing project tracker URL if ticket ID is found
    if components["ticket_id"] and not project_tracker_url:
        logger.warning(
            "Ticket ID found but `projectTrackerUrl` was not found in your "
            "`.gitconfig` `[hook]` section nor was PROJECT_TRACKER_URL set in "
            "your enviornment. Links will not be generated. Adjust your git "
            "configuratioan or set the environment variable to enable ticket linking."
        )

    # Format subject line
    subject = format_commit_subject(components)

    # Get template file
    template_path = get_commit_template_path()
    if not template_path:
        logger.info("No commit template found, using default template")
        template_content = create_default_template()
    else:
        try:
            with open(template_path, 'r') as f:
                template_content = f.read()
        except Exception as e:
            logger.warning(f"Failed to read template file: {e}")
            template_content = create_default_template()

    # Prepare variables for substitution
    variables = {"SUBJECT": subject, "REFERENCE": ""}

    # Add reference link if project tracker URL and ticket ID are available
    if project_tracker_url and components["ticket_id"]:
        # Remove trailing slash from URL if present
        project_tracker_url = project_tracker_url.rstrip('/')
        variables["REFERENCE"] = (
            f"[{components['ticket_id']}]: "
            f"{project_tracker_url}/{components['ticket_id']}"
        )

    # Replace variables in template
    result = expand_template_variables(template_content, variables)

    # Write to commit message file
    try:
        with open(commit_msg_file, 'w') as f:
            f.write(result)
    except Exception as e:
        logger.error(f"Failed to write commit message: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
