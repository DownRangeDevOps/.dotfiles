#!/usr/bin/env bash
# shellcheck disable=SC1091

# USAGE: git commit
#
# SYNOPSIS:
#       Parse the current git branch name and break it into parts on the
#       delimiter "--". Use `envsubst` to replace the variables in SHELL_FORMAT
#       contained in the current commit message template file
#       (`commit.template`) and write the results to `$COMMIT_MSG_FILE`.
#
# USAGE:
#       Supported branch elements:
#
#       | element   | required     | format (leading)  | (trailing)           |
#       | --------- | ------------ | ----------------- | ---------------------|
#       | subject   | yes          | `subject`         | `.../subject`        |
#       | initials  | no (removed) | `xx/...`          | `.../xx/...`         |
#       | type      | no           | `type/...`        | `.../type/...`       |
#       | scope     | no           | `type-scope/...`  | `.../type-scope/...` |
#       | ticket id | no           | `ticket_id--...`  | `.../ticket_id--...` |
#
#       Supported change types (based on the Angular conventions:
#       https://github.com/angular/angular/blob/22b96b9/CONTRIBUTING.md#-commit-message-guidelines)
#
#       * feat(ure): A new feature
#       * fix: A bug fix
#       * build: Changes that affect the build system or external dependencies
#       * chore: A non-functional/non-logic change that doesn't change style (e.g. README update)
#       * ci: Changes to our CI configuration files and scripts
#       * docs: Documentation only changes
#       * style: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)
#       * refactor: A code change that neither fixes a bug nor adds a feature
#       * perf: A code change that improves performance without altering behavior
#       * test: Adding missing tests or correcting existing tests
#
#       Examples:
#
#       <subject>
#       <ticket-id>--<subject>
#       <user-initials>/<subject>
#       <user-initials>/<ticket-id>--<subject>
#       <issue-type>/<user-initials>/<subject>
#       <issue-type>-<issue-scope>/<user-initials>/<subject>
#       <issue-type>/<user-initials>/<ticket-id>--<subject>
#       <issue-type>-<issue-scope>/<user-initials>/<ticket-id>--<subject>
#
# OPTIONS:
#       If `$PROJECT_TRACKER_URL` is set and <ticket-id> present:
#           * A markdown reference link will be appended to the end of the commit message
#           * [[<ticket-id>]] will be appended to <subject>
#           * <ticket-id> in the commit message will be formatted as markdown
#             links (e.g. [<ticket-id>])

COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2
# SHA1=$3

function search_arr() {
    MATCH=""

    local i=0
    local grep_cmd=(
        "grep"
        "--extended-regexp"
        "--ignore-case"
        "--only-matching"
    )
    local pattern="$1"
    shift

    for part in "$@"; do
        if "${grep_cmd[@]}" "${pattern}" <<<"${part}" &>/dev/null; then
            # match="${part}"
            MATCH=${part}
            unset "BRANCH_PARTS[$i]"
            break
        fi

        i=$((i + 1))
    done
}

function parse() {
    local branch_type
    local branch_scope
    local tmp
    local ticket_id

    search_arr "${COMMIT_TYPES}" "${BRANCH_PARTS[@]}"
    BRANCH_PARTS=("${BRANCH_PARTS[@]}")
    mapfile -t tmp < <(awk NF=NF FS="-" OFS="\n" <<<"${MATCH}")
    branch_type="${tmp[0]:-}"
    branch_scope="${tmp[1]:-}"

    search_arr "[A-Za-z]+[0-9]*-[0-9]+" "${BRANCH_PARTS[@]}"
    BRANCH_PARTS=("${BRANCH_PARTS[@]}")
    ticket_id="${MATCH}"

    # Remove user initials
    search_arr "${USER_INITIALS}" "${BRANCH_PARTS[@]}"
    BRANCH_PARTS=("${BRANCH_PARTS[@]}")

    # Join the rest
    branch_name="$(join " " "${BRANCH_PARTS[@]}")"

    local SUBJECT_PARTS=()

    if [[ -n ${branch_type:-} && -n ${branch_scope:-} ]]; then
        SUBJECT_PARTS+=("${branch_type}(${branch_scope}):")
    elif [[ -n ${branch_type:-} ]]; then
        SUBJECT_PARTS+=("${branch_type}:")
    fi

    if [[ -n ${branch_name:-} ]]; then
        SUBJECT_PARTS+=("$(sed -E "s/-/ /g" <<<"${branch_name^}")")
    fi

    if [[ -n ${ticket_id:-} ]]; then
        SUBJECT_PARTS+=("[[${ticket_id}]]")
    fi

    export SUBJECT="${SUBJECT_PARTS[*]}"

    if [[ -n ${PROJECT_TRACKER_URL:-} && -n ${ticket_id:-} ]]; then
        PROJECT_TRACKER_URL=$(sed -E 's/\/$//' <<<"${PROJECT_TRACKER_URL}")
        export REFERENCE="[${ticket_id}]: ${PROJECT_TRACKER_URL}/${ticket_id}"
        # shellcheck disable=SC2016  # literal expression intended
        envsubst '${SUBJECT} ${REFERENCE}' <"${TEMPLATE_FILE}" >"${COMMIT_MSG_FILE}"
    else
        # shellcheck disable=SC2016  # literal expression intended
        envsubst '${SUBJECT}' <"${TEMPLATE_FILE}" >"${COMMIT_MSG_FILE}"
    fi

    unset SUBJECT
    unset REFERENCE
}

if [[ ${COMMIT_SOURCE} == "template" && -n "$(command -v envsubst)" ]]; then
    source "${HOME}/.dotfiles/bash.d/lib.sh"
    COMMIT_TYPES="${COMMIT_TYPES:-^feat|^fix|^build|^chore|^ci|^docs|^style|^refactor|^perf|^test}"
    USER_INITIALS="${USER_INITIALS:-rf}"
    CUR_BRANCH="${CUR_BRANCH:-$(git branch --show-current)}"
    TEMPLATE_FILE="${HOME}/$(git config commit.template | sed -E "s/^~//")"
    mapfile -t BRANCH_PARTS < <(awk NF=NF FS="/|--" OFS="\n" <<<"${CUR_BRANCH}")

    parse
fi
