" vim: set ft=vim

" Use UTF8 encoding
set encoding=utf-8
set fileencodings=ucs-bom,utf-8,latin1
setglobal nobomb
setglobal fileencoding=utf-8
scriptencoding utf-8

""" Prefrences ---------------------------------------------------------------
" Use space as leader key
let mapleader=' '
nnoremap <space> <leader>

" Config
filetype plugin indent on                " Enable file type detection and do language-dependent indenting.
set autochdir                            " Auto change working directory to that of the current file
set autoread                             " Automatically read files when they have changed
set autowrite                            " Automatically :write before running commands
set backspace=2                          " Backspace deletes like most programs in insert mode
set backspace=indent,eol,start           " Make backspace behave in a sane manner.
set colorcolumn=80                       " Make it obvious where 80 characters is
set complete+=kspell                     " Auto complete with dictionary words when spell check is on
set tags=tags                            " Enable ctags
set diffopt+=vertical                    " Always use vertical diffs
set directory=~/tmp                      " set where swapfile(s) are stored
set fillchars+=vert:\ |
set foldcolumn=0
set foldnestmax=2                        " methods of classes are folded, but not internal statements
set foldenable                           " Code folding config
set foldlevelstart=2
set foldmethod=indent
set formatoptions=croqnlj                " See :help fo-table
set history=50                           " store command history across sessions
set hlsearch                             " highlight search matches
set incsearch                            " do incremental searching
set lazyredraw                           " Disable redraw when executing macros
set list listchars=tab:»·,trail:·,nbsp:· " Display tabs, non-breaking spaces, and trailing whitespace
set mouse=a
set noshowmode                           " hide the mode status line
set spell spelllang=en_us                " Turn off spell checking by default
set noswapfile                           " disable swap file
set ruler                                " show the cursor position all the time
set scrolloff=2                          " Always show one line above/below the cursor
set secure                               " Prevent shell, write, :au unless file is owned by me
set sessionoptions+=tabpages,globals     " Allow Taboo to maintain tab names across sessions
set showbreak=↳\                         " Indicate wrapped lines
set linebreak
set showcmd                              " display incomplete commands
set splitbelow                           " Open new split panes to the right/bottom
set splitright
set termguicolors                        " Use true color
set timeoutlen=700                       " set a short leader timeout
set wildmode=list:longest,list:full      " Configure auto completion see :help wildmode
if &diff                                 " only for diff mode/vimdiff
set diffopt=filler,context:1000000     " filler is default and inserts empty lines for sync
endif

" Default tabbing preferences
set shiftround
set expandtab
set tabstop=4
set shiftwidth=4

" Relative line numbers
set number
set relativenumber
set numberwidth=5

" Change cursor shape in iTerm2 & tmux
if has('nvim')
    set guicursor=n-c-v-sm:block-Cursor/lCursor,
                \i-ci-ve:ver25-Cursor/lCursor,
                \r-cr-o:hor20-Cursor/lCursor,
                \a:blinkwait0-blinkoff500-blinkon500-Cursor/lCursor
    let g:python3_host_prog = '/Users/ryanfisher/.virtualenvs/nvim/bin/python3'
else
    let &t_SI = "\<ESC>]50;CursorShape=1\x7"
    let &t_SR = "\<ESC>]50;CursorShape=2\x7"
    let &t_EI = "\<ESC>]50;CursorShape=0\x7"
    let &t_SI = "\<ESC>Ptmux;\<ESC>\<ESC>]50;CursorShape=1\x7\<ESC>\\"
    let &t_SR = "\<ESC>Ptmux;\<ESC>\<ESC>]50;CursorShape=2\x7\<ESC>\\"
    let &t_EI = "\<ESC>Ptmux;\<ESC>\<ESC>]50;CursorShape=0\x7\<ESC>\\"
endif

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if (&t_Co > 2 || has('gui_running')) && !exists('syntax_on')
    syntax on
    set synmaxcol=200
endif

" Keep undo history across sessions by storing it in a file
if has('persistent_undo')
    let undo_dir = expand('$HOME/.vim/undo_dir')
    if !isdirectory(undo_dir)
        call mkdir(undo_dir, '', 0700)
    endif
    set undodir=$HOME/.vim/undo_dir
    set undofile
endif

inoremap <C-@> <C-Space>|                                   " Get to next editing point after autocomplete
nnoremap <Leader>o o<Esc>                                   " Quickly insert an empty new line without entering insert mode
nnoremap <Leader>O O<Esc>
inoremap jj <ESC>|                                          " Easy escape from insert/visual mode
inoremap jk <ESC>|                                          " Easy escape from insert/visual mode
vnoremap <C-r> "hy:%s/<C-r>h//gc<left><left><left>|         " Replace selected text
nnoremap \ :ProjectRootCD<CR>:Ag -i<SPACE>|                 " bind \ (backward slash) to grep shortcut
nnoremap <silent> <expr> <CR> &buftype ==# 'quickfix' ? "\<CR>:lclose\|cclose\|noh\<CR>" : ":noh\<CR>\<CR>"
nnoremap K                                                  " Keep searching for man entries by accident
nnoremap Q <Plug>window:quickfix:toggle

" Easy split navigation
nnoremap <silent><leader>\ :call <SID>OpenNewSplit('\')<CR>|        " Open vertical split
nnoremap <silent><leader>\| :call <SID>OpenNewSplit('\|')<CR>|      " Open horizontal split
noremap <C-h> <C-w>h                                       " Move left a window
let g:BASH_Ctrl_j = 'off'
noremap <C-j> <C-w>j                                       " Move down a window
noremap <C-k> <C-w>k                                       " Move up a window
noremap <C-l> <C-w>l                                       " Move right a window
nnoremap <c-w><c-w> <ESC><C-w>=                            " Set windows to equal size
if has('nvim')
    tnoremap <C-h> <C-\><C-n><C-w>h                        " Move left a window
    tnoremap <C-j> <C-\><C-n><C-w>j                        " Move down a window
    tnoremap <C-k> <C-\><C-n><C-w>k                        " Move up a window
    tnoremap <C-l> <C-\><C-n><C-w>l                        " Move right a window
    tnoremap <s-space> <space>
endif

" Easy tab navigation
nnoremap <silent><leader><S-w> :tabclose<CR>                " Move right a window
nnoremap <silent><leader><S-h> :tabprevious<CR>             " Move left a window
nnoremap <silent><leader><S-l> :tabnext<CR>                 " Move right a window

" Use magic in search/substitute
nnoremap / /\v\c
vnoremap / /\v\c
cnoremap %% %s/\v
cnoremap %%% s/\v
" cnoremap \>s/ \>smagic/
" nnoremap :g/ :g/\v
" nnoremap :g// :g//

" Utility
nnoremap ` za
nnoremap <leader>qa :call <SID>StripTrailingWhitespaces()<CR>:wa<CR>:qa<CR>|                " Close buffer(s)
nnoremap <silent><leader>q :call <SID>WipeBufOrQuit()<CR>
nnoremap <silent><leader>qq :q<CR>|
nnoremap <silent><leader>Q :q<CR>|
nnoremap <silent><leader>~ :sp<CR>:ProjectRootExe term<CR>:setl nospell<CR>:startinsert<CR>
nnoremap <silent><leader>` :vsp<CR>:ProjectRootExe term<CR>:setl nospell<CR>:startinsert<CR>
nnoremap <silent><leader>s :call ToggleSpell()<CR>
nnoremap <silent><leader>w :call <SID>StripTrailingWhitespaces()<CR>:w<CR>|                 " wtf workaround bc broken from autowrite or...???? Write buffer
nnoremap <silent><leader>1 :call <SID>NvimNerdTreeToggle()<CR>|                             " Open/close NERDTree
nnoremap <silent><leader>2 :ProjectRootExe NERDTreeFind<CR>|                                " Open NERDTree and hilight the current file
nnoremap <silent><leader>3 :TagbarOpenAutoClose<CR>:set relativenumber<CR>|                 " Open NERDTree and hilight the current file
nnoremap <leader>n :enew<CR>|                                                               " Open new buffer in current split
nnoremap <leader>/ :noh<CR>|                                                                " Clear search pattern matches with return
nnoremap <silent><leader>m :Neomake
nnoremap <silent><C-p> :ProjectRootExe Files<CR>|                                           " Open FZF
nnoremap <leader>ha <Plug>GitGutterStageHunk
nnoremap <leader>hr <Plug>GitGutter
nnoremap <silent><leader>l :let @+=<SID>GetPathToCurrentLine()<CR>|                         " Copy curgent line path/number
nnoremap Y y$                                                                               " Make Y act like C and D
nnoremap <leader>d :Dash<CR>

" Find/replace
nnoremap <leader>f :lvim /<C-R>=expand("<cword>")<CR>/ %<CR>:lopen<CR>
nnoremap <silent><leader>F :ProjectRootExe grep! "\b<C-R><C-W>\b"<CR>:bo copen 5<CR>|       " Bind K to grep word under cursor
nnoremap <leader>r :%s/\<<C-r><C-w>\>/

" Cut
nmap <leader>x <Plug>MoveMotionPlug
xmap <leader>x <Plug>MoveMotionXPlug
nmap <leader>xx <Plug>MoveMotionLinePlug
nmap <leader>X <Plug>MoveMotionEndOfLinePlug

" Copy/paste to/from system clipboard
vnoremap <leader>y  "+y
vnoremap <LeftRelease> "+y<LeftRelease>
nnoremap <leader>y  "+y
nnoremap <leader>Y  "+yg_
nnoremap <leader>yy  "+yy
nnoremap <leader>p "+p

" Treat <li> and <p> tags like the block tags they are
let g:html_indent_tags = 'li\|p'

" NeoVim configuration
if has('nvim') && !exists('g:gui_oni')
    let $VISUAL = 'nvr -cc split --remote-wait'  " Prevent nested neovim instances when using :term
    nnoremap <leader>rc :so ~/.config/nvim/init.vim<CR>|
else
    nnoremap <leader>rc :so $MYVIMRC<CR>:echom $MYVIMRC " reloaded"<CR>|
endif

" Prevent nested neovim instances when using :term
if has('nvim')
  let $VISUAL = 'nvr -cc split --remote-wait'
endif

hi Cursor ctermbg=6 guibg=#76d4d6
hi NeomakeErrorSign ctermfg=196 guifg=#d70000
hi NeomakeWarningSign ctermfg=226 guifg=#ffff00
hi FoldColumn guifg=#313131 ctermfg=235

" Custom colors that override any theme loaded to this point
hi Search ctermfg=2 ctermbg=29 guifg=#a8d4a9 guibg=#134f2f
" hi Cursor ctermbg=6 guibg=#2aa198
" hi ColorColumn ctermbg=8 guibg=#003741
" hi Normal ctermbg=NONE guibg=NONE
" hi Comment cterm=italic gui=italic
" hi MatchParen ctermbg=NONE guibg=NONE
" hi GitGutterAdd ctermbg=8 guibg=#003741
" hi GitGutterChange ctermbg=8 guibg=#003741
" hi GitGutterDelete ctermbg=8 guibg=#003741
" hi GitGutterChangeDelete ctermbg=8 guibg=#003741
hi DiffDelete ctermfg=8 ctermbg=0 gui=bold guifg=#2d2d2d guibg=#484A4A
hi DiffAdd ctermbg=108  guibg=#366344
hi DiffChange ctermbg=31 guibg=#385570
hi DiffText ctermbg=208 guibg=#6E3935
